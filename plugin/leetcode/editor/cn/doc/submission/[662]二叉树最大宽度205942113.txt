/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public int widthOfBinaryTree(TreeNode root) {
            Queue<AnnotatedNode> queue = new LinkedList<>();
            queue.add(new AnnotatedNode(root, 0, 0));
            int curDepth = 0, left = 0, result = 0;

            while (!queue.isEmpty()) {
                AnnotatedNode annotatedNode = queue.poll();
                if (annotatedNode.node != null) {
                    queue.add(new AnnotatedNode(
                            annotatedNode.node.left, annotatedNode.depth + 1, annotatedNode.pos * 2));
                    queue.add(new AnnotatedNode(
                            annotatedNode.node.right, annotatedNode.depth + 1, annotatedNode.pos * 2 + 1));
                    /*对于每一个深度，第一个遇到的节点是最左边的节点，最后一个到达的节点是最右边的节点。*/
                    if (curDepth != annotatedNode.depth) {
                        curDepth = annotatedNode.depth;
                        left = annotatedNode.pos;
                    }
                    result = Math.max(result, annotatedNode.pos - left + 1);
                }
            }
            return result;
    }
}
class AnnotatedNode {
        TreeNode node;
        int depth, pos;

        public AnnotatedNode(TreeNode node, int depth, int pos) {
            this.node = node;
            this.depth = depth;
            this.pos = pos;
        }
}
//runtime:2 ms
//memory:38.2 MB
