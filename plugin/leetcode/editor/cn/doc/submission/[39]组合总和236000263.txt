class Solution {
    List<List<Integer>> result = new ArrayList<>();
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        if(candidates.length == 0) return result;
        Arrays.sort(candidates);
        List<Integer> track = new ArrayList<>();
        backtrack(candidates,target,track,0,0);
        return result;
    }
    public void backtrack(int[] candidates, int target, List<Integer> track, int start, int sum){
        if(sum == target){
            result.add(new ArrayList<>(track));
            return;
        }        
        for(int i = start; i < candidates.length; i++){
            if(sum + candidates[i] > target) continue;
            if(i > start && candidates[i] == candidates[i-1]) continue;
            track.add(candidates[i]);
            sum+=candidates[i];
            backtrack(candidates,target,track,i,sum);
            sum-=candidates[i];
            track.remove(track.size()-1);
        }
    }
}
//runtime:3 ms
//memory:38.6 MB
