/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public int diameterOfBinaryTree(TreeNode root) {
        if(root == null) return 0;

        int lMaxDepth = getMaxDepth(root.left);
        int rMaxDepth = getMaxDepth(root.right);

        int lDiameter = diameterOfBinaryTree(root.left);
        int rDiameter = diameterOfBinaryTree(root.right);

        return Math.max((lMaxDepth+rMaxDepth),Math.max(lDiameter,rDiameter));
    }
    public int getMaxDepth(TreeNode root){
        if(root == null) return 0;
        return Math.max(getMaxDepth(root.left),getMaxDepth(root.right))+1;
    }
}
//runtime:9 ms
//memory:38.8 MB
