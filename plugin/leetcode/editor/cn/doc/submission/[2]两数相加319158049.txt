/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        ListNode p1 = l1, p2 = l2;
        ListNode dummy = new ListNode(-1);
        ListNode p = dummy; // 指针 p 负责构建新链表
        int carry = 0;
        // 链表是逆序，所以从个位开始执行加法，两条链表走完 且 没有进位 时才能结束循环
        while(p1 != null || p2 != null || carry > 0){
            int val = carry; // 先加上上次的进位
            if(p1 != null){
                val += p1.val;
                p1 = p1.next;
            }
            if(p2 != null){
                val += p2.val;
                p2 = p2.next;
            }
            carry = val / 10; // 处理进位
            val = val % 10; // 取余
            p.next = new ListNode(val); // 构造相加后的新节点
            p = p.next; 
        }
        return dummy.next;
    }
}
//runtime:1 ms
//memory:41.3 MB
