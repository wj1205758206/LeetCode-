class Solution {
    public int minDistance(String word1, String word2) {
        int m = word1.length(), n = word2.length();
        int[][] dp = new int[m+1][n+1];
        
        for(int i = 1; i <= m; i++){
            dp[i][0] = i; // word2 = "" 的情况，全执行删除操作
        }
        for(int j = 1; j <= n; j++){
            dp[0][j] = j; // word1 = "" 的情况，全执行插入操作
        }

        for(int i = 1; i <= m; i++){
            for(int j = 1; j <= n; j++){
                if(word1.charAt(i-1) == word2.charAt(j-1)){
                    dp[i][j] = dp[i-1][j-1];
                }else{
                    dp[i][j] = min(
                        dp[i-1][j] + 1, // 删除
                        dp[i][j-1] + 1, // 插入
                        dp[i-1][j-1] + 1 // 替换
                        );
                }
            }
        }
        return dp[m][n];
    }
    public int min(int a, int b, int c){
        return Math.min(a, Math.min(b, c));
    }
}
//runtime:4 ms
//memory:41.8 MB
