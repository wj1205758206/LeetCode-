class Solution {
        public void solveSudoku(char[][] board) {
            backtrace(board, 0, 0);
        }

        private boolean backtrace(char[][] board, int i, int j) {
            int m = 9, n = 9;
            if (i == m)
                return true;
            if (j == n)
                return backtrace(board, i + 1, 0);
            if (board[i][j] != '.')
                return backtrace(board, i, j + 1);

            for (char c = '1'; c <= '9'; c++) {
                if (!isValid(board, i, j, c))
                    continue;
                board[i][j] = c;
                if (backtrace(board, i, j + 1))
                    return true;
                board[i][j] = '.';
            }
            return false;
        }

        private boolean isValid(char[][] board, int row, int col, char c) {
            for (int i = 0; i < 9; i++) {
                if (board[row][i] == c)
                    return false;
                if (board[i][col] == c)
                    return false;
                if (board[(row / 3) * 3 + i / 3][(col / 3) * 3 + i % 3] == c)
                    return false;
            }
            return true;
        }
    }
//runtime:11 ms
//memory:35.9 MB
