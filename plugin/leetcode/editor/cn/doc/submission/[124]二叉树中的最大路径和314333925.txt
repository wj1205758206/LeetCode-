/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    int result = Integer.MIN_VALUE;
    public int maxPathSum(TreeNode root) {
        if(root == null) return result;
        getSingleMaxPathSum(root);
        return result;
    }
    public int getSingleMaxPathSum(TreeNode root){
        if(root == null) return 0;
        
        int leftMax = Math.max(0,getSingleMaxPathSum(root.left)); //有可能路径和为负数
        int rightMax = Math.max(0,getSingleMaxPathSum(root.right));
        // 后续遍历
        int pathMaxSum = root.val + leftMax + rightMax;
        // 后续遍历的同时更新最大值
        result = Math.max(result,pathMaxSum);

        // 实现递归定义，返回的是从root开始，最大的单条分支路径和
        return Math.max(leftMax,rightMax) + root.val;
    }
}
//runtime:0 ms
//memory:42.8 MB
