 
class Solution {
    public boolean canPartitionKSubsets(int[] nums, int k) {
        if(k > nums.length) return false;
        int sum = 0;
        for(int num : nums){
            sum+=num;
        }
        if(sum % k !=0) return false;
        int[] bucket = new int[k];
        int target = sum / k;

        int max = 0; 
        for(int i = 0; i < nums.length;i++){
            if(nums[max] < nums[i]){
                int temp = nums[max];
                nums[max] = nums[i];
                nums[i] = temp;
                max = i;
            }
        }
        
        return backtrack(nums,0,bucket,target);
    }
    public boolean backtrack(int[] nums, int index, int[] bucket, int target){
        if(index == nums.length){
            for(int i = 0; i < bucket.length; i++){
                if(bucket[i]!=target){
                    return false;
                }
            }
            return true;
        }

        for(int i = 0; i < bucket.length; i++){
            if(bucket[i]+nums[index]>target)
                continue;
            
            bucket[i] += nums[index];
            if(backtrack(nums,index+1,bucket,target))
                return true;
            bucket[i] -= nums[index];
        }
        return false;
    }
}
//runtime:843 ms
//memory:35.9 MB
