/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
        public TreeNode constructFromPrePost(int[] preorder, int[] postorder) {
            if (preorder.length == 0)
                return null;

            TreeNode root = new TreeNode(preorder[0]);
            if (preorder.length == 1)
                return root;

            int fengePoint = 0;
            for (int i = 0; i < postorder.length; i++) {
                if (preorder[1] == postorder[i])
                    fengePoint = i + 1;
            }

            root.left = constructFromPrePost(
                    Arrays.copyOfRange(preorder, 1, 1 + fengePoint),
                    Arrays.copyOfRange(postorder, 0, fengePoint));

            root.right = constructFromPrePost(
                    Arrays.copyOfRange(preorder, 1 + fengePoint, preorder.length),
                    Arrays.copyOfRange(postorder, fengePoint, postorder.length - 1));

            return root;
        }
    }
//runtime:1 ms
//memory:37.9 MB
