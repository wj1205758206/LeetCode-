/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {
        public ListNode getIntersectionNode(ListNode headA, ListNode headB) {
            int ALength = getLinkedListLength(headA);
            int BLength = getLinkedListLength(headB);
            int count = ALength - BLength;

            ListNode longLinkedList = headA;
            ListNode shortLinkedList = headB;

            if (ALength < BLength) {
                longLinkedList = headB;
                shortLinkedList = headA;
                count = -count;
            }

            while (count != 0) {
                count--;
                longLinkedList = longLinkedList.next;
            }

            while (longLinkedList != null && shortLinkedList != null && longLinkedList != shortLinkedList) {
                longLinkedList = longLinkedList.next;
                shortLinkedList = shortLinkedList.next;
            }

            return longLinkedList;
        }

        private int getLinkedListLength(ListNode head) {
            if (head == null) return 0;
            return 1 + getLinkedListLength(head.next);
        }
    }
//runtime:1 ms
//memory:41.4 MB
