/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<List<String>> printTree(TreeNode root) {
            int m = maxDepth(root);
            String[][] result = new String[m][(1 << m) - 1];
            for (String[] level : result) {
                Arrays.fill(level, "");
            }
            List<List<String>> ans = new ArrayList<>();
            fill(result, root, 0, 0, result[0].length);
            for (String[] level : result) {
                ans.add(Arrays.asList(level));
            }
            return ans;
    }
    class Location {
            TreeNode root;
            int i, left, right;

            Location(TreeNode node, int i, int left, int right) {
                this.root = node;
                this.i = i;
                this.left = left;
                this.right = right;
            }
    }
    private void fill(String[][] result, TreeNode root, int i, int left, int right) {
            Queue<Location> queue = new LinkedList<>();
            queue.offer(new Location(root, 0, 0, result[0].length));

            while (!queue.isEmpty()) {
                Location location = queue.poll();
                result[location.i][(location.left + location.right) / 2] = "" + location.root.val;
                if (location.root.left != null)
                    queue.offer(
                            new Location(location.root.left, location.i + 1,
                                    location.left, (location.left + location.right) / 2));
                if (location.root.right != null)
                    queue.offer(
                            new Location(location.root.right, location.i + 1,
                                    (location.left + location.right + 1) / 2, location.right));
            }
    }
    private int maxDepth(TreeNode root) {
            if (root == null)
                return 0;
            return Math.max(maxDepth(root.left), maxDepth(root.right)) + 1;
    }
}
//runtime:5 ms
//memory:38.9 MB
